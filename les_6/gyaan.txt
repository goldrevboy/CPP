gcc evaluates the function arguements in right to left order while clang does opposite
div by 0 is implementation dependent

remainder takes the sign of the first operand

while using commas each things evaluates separately and the right most value is returned / assigned
z=a,b assignment and then b is returned while z = (a,b) z is alloted b
condition ? expression1 : expression2;
    std::cout << (x < 0) ? "negative" : "non-negative"; /// prints 0 because of priority of <<

std::tostring() converts integers to string
comp of floating points best done using epsilon method

short circuiting  strict Left to right
Similarly, if the left operand for logical OR is true, then the entire OR condition has to evaluate to true, and the right operand wonâ€™t be evaluated.
if left operand false in AND then right not evaluated ( problematic for stuff like ++ and --)
AND has higher pref than OR
!= can act as LOGICAL XOR


